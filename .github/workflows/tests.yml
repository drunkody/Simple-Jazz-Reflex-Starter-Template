name: Tests

on:
push:
branches: [ main, develop ]
pull_request:
branches: [ main, develop ]

jobs:
test:
name: Test Python ${{ matrix.python-version }}
runs-on: ubuntu-latest
strategy:
fail-fast: false
matrix:
python-version: ["3.10", "3.11", "3.12"]

steps:
- name: Checkout code
uses: actions/checkout@v4

- name: Set up Python ${{ matrix.python-version }}
uses: actions/setup-python@v5
with:
python-version: ${{ matrix.python-version }}

- name: Cache pip dependencies
uses: actions/cache@v4
with:
path: ~/.cache/pip
key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
restore-keys: |
${{ runner.os }}-pip-

- name: Install dependencies
run: |
python -m pip install --upgrade pip
pip install -r requirements.txt

- name: Run tests with coverage
run: |
pytest tests/ -v --cov=app --cov=config --cov-report=xml --cov-report=term
env:
APP_ENV: testing
JAZZ_SYNC_SERVER: ""
JAZZ_ENABLE_P2P: "false"
LOG_LEVEL: ERROR

- name: Upload coverage to Codecov
uses: codecov/codecov-action@v4
with:
file: ./coverage.xml
flags: python-${{ matrix.python-version }}
fail_ci_if_error: false
token: ${{ secrets.CODECOV_TOKEN }}

lint:
name: Lint and Type Check
runs-on: ubuntu-latest

steps:
- name: Checkout code
uses: actions/checkout@v4

- name: Set up Python
uses: actions/setup-python@v5
with:
python-version: "3.11"

- name: Cache pip dependencies
uses: actions/cache@v4
with:
path: ~/.cache/pip
key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
restore-keys: |
${{ runner.os }}-pip-lint-
${{ runner.os }}-pip-

- name: Install dependencies
run: |
python -m pip install --upgrade pip
pip install -r requirements.txt
pip install ruff mypy bandit[toml]

- name: Run ruff (linter)
run: |
# Check for syntax errors and undefined names
ruff check app/ tests/ config.py --select=E9,F63,F7,F82 --output-format=github
# Full lint check
ruff check app/ tests/ config.py --output-format=github
continue-on-error: false

- name: Run mypy (type checker)
run: |
mypy app/ tests/ config.py --ignore-missing-imports --no-strict-optional
continue-on-error: true

- name: Run bandit (security check)
run: |
bandit -r app/ config.py -ll --format json -o bandit-report.json || true
bandit -r app/ config.py -ll
continue-on-error: true

typescript-check:
name: TypeScript Schema Check
runs-on: ubuntu-latest

steps:
- name: Checkout code
uses: actions/checkout@v4

- name: Set up Node.js
uses: actions/setup-node@v4
with:
node-version: '20'
cache: 'npm'

- name: Install Jazz dependencies
run: |
npm install --save-dev typescript jazz-tools jazz-react cojson

- name: Check TypeScript schemas
run: |
npx tsc --noEmit --skipLibCheck app/jazz/schema.ts || echo "TypeScript check completed with warnings"
continue-on-error: true

summary:
name: Test Summary
runs-on: ubuntu-latest
needs: [test, lint, typescript-check]
if: always()

steps:
- name: Check test results
run: |
echo "Tests: ${{ needs.test.result }}"
echo "Lint: ${{ needs.lint.result }}"
echo "TypeScript: ${{ needs.typescript-check.result }}"

if [ "${{ needs.test.result }}" != "success" ]; then
echo "❌ Tests failed"
exit 1
fi

if [ "${{ needs.lint.result }}" != "success" ]; then
echo "⚠️ Linting had issues (non-blocking)"
fi

echo "✅ All required checks passed"
